#ReadMe
#ideas - split input list into 26 lists, each per alphabet, and delete symbolic starts
            #from there possible combinations is much less.
            #try for 'A'




#1  save as excel worksheet - otherwise (CSV, CSV-DOS, etc.) a warning will throw, so might as well not reformat.
#2  If output excel sheet is open, and you try to run script again, error 'No13 - Permission Denied' will be thrown

#import libraries
import pandas as pd
import os
from collections import Counter
import stringdist as sd
import jellyfish as jlfsh
import itertools
import csv


#show current directory and files in current directory
os.chdir(r"C:\Users\prozehnal\Desktop\csv_house\csv") #changes to correct directory from absolute reference
# print(os.getcwd(),'<--current directory') #prints current directory to ensure you're in the right folder
# print(os.listdir(os.getcwd()),'<----files in current dir') #lists files in current directory
# print('\n\n')

#input -> output data manipulation
#boss_lvl == 'all_radu_c.csv'
inp_data= pd.read_csv('ecomm.csv',encoding = 'unicode_escape',usecols=[0],verbose=False) #potentially useful: skipinitialspace, squeeze,verbose
inp_data=inp_data["Features"].tolist()

i_l= [i.split() for i in inp_data]


temp_l=[] #temp holds soundex values to match length of elements, so each element is soundexed.
combined_l=[] #sublist of combined string and soundex.
soundex_l=[]

for i in i_l:
    for element in range(len(i)):
        jellied = jlfsh.soundex(i[element])
        temp_l.append(jellied)
        if len(temp_l)==len(i):
            soundex_l.append(temp_l)
            combined_l.append(i)
            combined_l.append(temp_l)
            temp_l=[]


def flattener(ilist):
    o=[]
    for i in ilist:
        j= " ".join(i) #join replaces commas with " " j = i.replace(',',' ') DOES not work, i believe replace only works within a string, rather than between strings. #str.replace == str.split().join()
        # print(j)
        o.append(j)
    return o

inp_flat=flattener(i_l)
sound_flat=flattener(soundex_l)

def txtsaver(title,yourdict):
    with open(title, mode="w", encoding="iso-8859-1") as f:
        for place, item in enumerate(yourdict):
            f.write('%s\n' % item)
            if (place+1)%4==0:
                f.write('\n')


def csvsaver(title,yourdict): #notused
    file = open(title,'w')
    f= csv.writer(file,  lineterminator = '\n')
    for k,v in yourdict.items():
        f.writerow([k,v])

def dict_creator_w_variable_length(numberofloops,list_length, keys, values):
    hashmap = {}
    x=0

    for i in range(len(list_length)):
        if x== numberofloops:
            return hashmap#soundex_l and all the others all have the same lengths.
        hashmap.update({keys[i]:values[i]}) #damn colon gave me issues
        x+=1
    return hashmap

# print(combined_l)
d_word_tok=dict_creator_w_variable_length(len(inp_flat),soundex_l,inp_flat,sound_flat)
print(3423424234,d_word_tok)
# drefined = {} #gives dict of word:token
allcombinations= list(itertools.combinations(d_word_tok.items(),2))
print(allcombinations)
drefined=[]
allfirstlettercombinations =[]
for i in allcombinations:
    # print(i, i[0][0][0:3],i[1][0][0:3])
    if i[0][0][0:3] == i[1][0][0:3]:
        allfirstlettercombinations.append(i)

difference_small=[] #im going to take the terms which are very close to each other's token leven-distances, append them to this list.
                            #from there i will subtract the original list from this list. l3= inp_flat - difference_small
for i in allfirstlettercombinations:
        print(i,sd.levenshtein(i[0][0],i[1][0]),sd.levenshtein(i[0][1],i[1][1]))
        if sd.levenshtein(i[0][1],i[1][1]) < 9:
            difference_small.append(i[0][0])

print('difference',len(set(difference_small)),set(difference_small))
print('inp list',len(inp_flat),inp_flat)
final_l = [item for item in inp_flat if item not in difference_small]
# fml= difference_small - inp_flat
# [item for item in x if item not in y]
print('last',len(final_l),final_l)
final_l=sorted(final_l)
txtsaver("waves1.txt",inp_flat)
txtsaver("waves2.txt",final_l)
# for i in allcombinations:
#     levend = sd.levenshtein(i[0][1],i[1][1])
#     # if levend >6:
#     print(levend,i[0][1],i[1][1],555,i[1][1][0])
#     drefined.append(i[0][0])
#     drefined.append(i[1][0])
# print(len(drefined),drefined)
# print(3423424234,len(d_word_tok),d_word_tok)
# print(len(set(drefined)),set(drefined))
#since im taking all combinations, they are about to find one comparison that the levend is above or below any threshold, so this doesnt work.
    #what i have to do is compare all combinations of entries that start with the same letter only. i[][][00000]

# lrefined = []
# allcombinations= list(itertools.combinations(dinp_sound.items(),2))
# for i in allcombinations:
#     levend = sd.levenshtein(i[0][1],i[1][1])
#     if levend >7:
#         # print(i[0],i[1])
#         lrefined.append(i[0][0])

# print(2,len(lrefined),lrefined)
# print(4,len(set(lrefined)),set(lrefined))
# print(3,len(wholedict),wholedict)
# print(3,len(tidbit),tidbit)

# print()
# # print(tidbit.items())
# print()
# txtsaver("waves.txt",inp_flat)
#
# l3= [el for el in inp_flat if el not in lrefined]
# print(1,len(set(lrefined)),set(lrefined))
# print(8787878,len(l3),l3)
# print(3,len(inp_flat),inp_flat)
