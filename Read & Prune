#ReadMe
#1  save as excel worksheet - otherwise (CSV, CSV-DOS, etc.) a warning will throw, so might as well not reformat.
#2  If output excel sheet is open, and you try to run script again, error 'No13 - Permission Denied' will be thrown


#import libraries
import pandas as pd
import os
from collections import Counter
import stringdist as sd

#show current directory and files in current directory
os.chdir(r"C:\Users\prozehnal\Desktop\csv_house\csv") #changes to correct directory from absolute reference
print(os.getcwd(),'<--current directory') #prints current directory to ensure you're in the right folder
print(os.listdir(os.getcwd()),'<----files in current dir') #lists files in current directory
print('\n\n')

#input -> output data manipulation
inp_data= pd.read_csv('hr.csv',usecols=[0],verbose=False) #potentially useful: skipinitialspace, squeeze,verbose
inp_data=inp_data["Features"].tolist()
titled_data_l=[str.title(i) for i in inp_data]
# titled_data_l_ps=list(set(titled_data_l))

setted_data_s=set(titled_data_l)
df=pd.DataFrame(setted_data_s) #index in the future to avoid outputting number column?

#acronym replacement - Have it take dict in the future? so that it's a clean single line?
df.replace('Erp','ERP',inplace=True, regex=True)
df.replace('Crm','CRM',inplace=True, regex=True)
df.replace('Seo','SEO',inplace=True, regex=True)
df.replace('Url','URL',inplace=True, regex=True)
df.replace('Api','API',inplace=True, regex=True)
df.replace('Cpa','CPA',inplace=True, regex=True)
df.replace('Ssl','SSL',inplace=True, regex=True)
df.replace('Fmla','FMLA',inplace=True, regex=True)
df.replace('Fsa','FSA',inplace=True, regex=True)


#levenshtein display (no edit to output yet)
#change titled_data_l to df in order to compare acronyms, though that doesn't actually
#matter and is more bikeshedding than anything
for i,j in zip(range(0,len(titled_data_l)-1), range(1,len(titled_data_l))):
    a=sd.levenshtein(titled_data_l[i],titled_data_l[j])
    if a<10 and len(titled_data_l[i])>2:
        print(titled_data_l[i],'AND',titled_data_l[j],a)

#------^-data manip-^-------v-datadisplay-v

#counter function - create a user-defined version i future
print('\n'*5)
counted=Counter(titled_data_l)
for i in counted:
    if counted[i]>1:
        print(i,'occured',counted[i],'times')

#statistic formation and display
l_input_data= len(inp_data)
l_set_data=len(setted_data_s)
dif = l_input_data-l_set_data
print(type(dif),type(l_set_data))
perc_inc= round((dif*100)/(l_input_data),2),"percent improvement"
print(l_input_data,dif,l_set_data,'replacement(s)',perc_inc)

#sort andsave output somewhere
#df.sort_values(by=[0])
print(df)
df.to_csv(r"C:\Users\prozehnal\Desktop\csv_house\csv\outputB.csv",)
